<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on CyderX</title>
    <link>https://davyxx3.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on CyderX</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 06 Dec 2021 01:00:00 +0800</lastBuildDate><atom:link href="https://davyxx3.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis底层数据结构</title>
      <link>https://davyxx3.github.io/p/redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 06 Dec 2021 01:00:00 +0800</pubDate>
      
      <guid>https://davyxx3.github.io/p/redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>先挖个坑，还没更完，有时间再补充完整 :)
底层数据结构 SDS 简单动态字符串（Simple Dynamic String）
SDS的底层结构
优点：
 常数复杂度获取字符串长度 防止缓冲区溢出 减少修改字符串的内存重分配次数（空间预分配，小于1MB时分配和len同样大小的未使用空间，大于1MB时分配1MB的未使用空间） 二进制安全（可以包含空字符） 兼容部分C字符串函数  链表 链表的底层结构
特点：
 双端 无环 带表头指针和表尾指针 带链表长度计数器 多态  字典 字典的底层结构
  dict（字典） -&amp;gt; dictht（dict hash table，也就是哈希表）-&amp;gt; dictEntry（哈希表节点）
  一般字典只使用ht[0]哈希表，ht[1]只会在扩容时使用
  rehashidx记录rehash目前的进度，如果没有在进行rehash，则值为-1
  Redis使用MurmurHash2算法计算hash值
在使用链表解决哈希冲突问题时，Redis把新加入的节点放在链表的表头位置，从而加快查找速度
rehash   为ht[1]分配空间，大小取决于ht[0]的键值对数量
  扩容：ht[1]的大小为第一个大于等于ht[0].used * 2的2^n
  收缩：ht[1]的大小为第一个大于等于ht[0].used的2^n
    重新计算索引值，移动元素
  释放ht[0]，ht[1]变为ht[0]，ht[1]创建一个空表</description>
    </item>
    
    <item>
      <title>谈谈缓存穿透、击穿和雪崩</title>
      <link>https://davyxx3.github.io/p/%E8%B0%88%E8%B0%88%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%87%BB%E7%A9%BF%E5%92%8C%E9%9B%AA%E5%B4%A9/</link>
      <pubDate>Fri, 26 Nov 2021 10:00:00 +0800</pubDate>
      
      <guid>https://davyxx3.github.io/p/%E8%B0%88%E8%B0%88%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E5%87%BB%E7%A9%BF%E5%92%8C%E9%9B%AA%E5%B4%A9/</guid>
      <description>缓存概览 缓存的收益：
 加速读写，优化用户体验 降低后端负载  缓存的成本：
 数据可能无法保证一致性 架构复杂度增大 代码维护成本（运维成本）增大  适用场景：
 开销大的复杂计算 加速请求响应  缓存穿透及优化 缓存穿透：查询一个根本不存在的数据，缓存层和存储层都不会命中
缓存穿透导致不存在的数据每次请求都要到存储层查询，缓存的保护失去了意义，会使后端存储负载加大
缓存穿透图示
解决办法
  缓存空对象：存储层不命中后，将空对象保存至缓存层中，之后的访问都会从缓存层获取，这样就保护了后端数据
缺点：
 缓存空对象，意味着缓存中存了更多的键，会占用空间，可以通过设置过期时间解决 缓存层和存储层会有一段时间窗口的不一致（比如缓存层中存了空对象并设置过期时间为5分钟，但此时存储层刚好添加了该键对应的数据，就造成了数据不一致），可以使用消息系统或者其他方式解决    布隆过滤器拦截：缓存穿透是查询一个根本不存在的数据，因此可以在缓存层前加一个布隆过滤器，将不存在的数据拦截。
 关于布隆过滤器，可以查看我写的另一篇文章：布隆过滤器的简单总结
   
两种解决方式的对比
   解决方式 适用场景 代价     缓存空对象 数据命中不高、数据变化频繁（实时性高） 需要过多缓存空间、数据不一致   布隆过滤器 数据命中不高，数据相对固定（实时性低） 代码维护复杂    PS：布隆过滤器不适用于数据变化频繁的场景（因为要不停地进行数据的插入和删除，而布隆过滤器对于删除操作极不友好），比较适用于数据相对固定的场景
缓存击穿及优化 缓存层的某个key承受着非常高的并发，当这个key失效的瞬间，大量的请求会同时击穿缓存，打到DB，就像在纱窗上戳破了一个洞
缓存击穿图示</description>
    </item>
    
  </channel>
</rss>
